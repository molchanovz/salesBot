// Code generated by mfd-generator v0.4.5; DO NOT EDIT.

//nolint:all
//lint:file-ignore U1000 ignore unused code, it's generated
package db

import (
	"github.com/go-pg/pg/v10"
	"github.com/go-pg/pg/v10/orm"
)

const condition = "?.? = ?"

// base filters
type applier func(query *orm.Query) (*orm.Query, error)

type search struct {
	appliers []applier
}

func (s *search) apply(query *orm.Query) {
	for _, applier := range s.appliers {
		query.Apply(applier)
	}
}

func (s *search) where(query *orm.Query, table, field string, value interface{}) {
	query.Where(condition, pg.Ident(table), pg.Ident(field), value)
}

func (s *search) WithApply(a applier) {
	if s.appliers == nil {
		s.appliers = []applier{}
	}
	s.appliers = append(s.appliers, a)
}

func (s *search) With(condition string, params ...interface{}) {
	s.WithApply(func(query *orm.Query) (*orm.Query, error) {
		return query.Where(condition, params...), nil
	})
}

// Searcher is interface for every generated filter
type Searcher interface {
	Apply(query *orm.Query) *orm.Query
	Q() applier

	With(condition string, params ...interface{})
	WithApply(a applier)
}

type GigachatmessageSearch struct {
	search

	ID           *int
	Message      *string
	Tgid         *int64
	Request      *string
	IDs          []int
	MessageILike *string
	RequestILike *string
}

func (gs *GigachatmessageSearch) Apply(query *orm.Query) *orm.Query {
	if gs == nil {
		return query
	}
	if gs.ID != nil {
		gs.where(query, Tables.Gigachatmessage.Alias, Columns.Gigachatmessage.ID, gs.ID)
	}
	if gs.Message != nil {
		gs.where(query, Tables.Gigachatmessage.Alias, Columns.Gigachatmessage.Message, gs.Message)
	}
	if gs.Tgid != nil {
		gs.where(query, Tables.Gigachatmessage.Alias, Columns.Gigachatmessage.Tgid, gs.Tgid)
	}
	if gs.Request != nil {
		gs.where(query, Tables.Gigachatmessage.Alias, Columns.Gigachatmessage.Request, gs.Request)
	}
	if len(gs.IDs) > 0 {
		Filter{Columns.Gigachatmessage.ID, gs.IDs, SearchTypeArray, false}.Apply(query)
	}
	if gs.MessageILike != nil {
		Filter{Columns.Gigachatmessage.Message, *gs.MessageILike, SearchTypeILike, false}.Apply(query)
	}
	if gs.RequestILike != nil {
		Filter{Columns.Gigachatmessage.Request, *gs.RequestILike, SearchTypeILike, false}.Apply(query)
	}

	gs.apply(query)

	return query
}

func (gs *GigachatmessageSearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		if gs == nil {
			return query, nil
		}
		return gs.Apply(query), nil
	}
}
